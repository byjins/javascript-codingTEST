/**
 * 배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때,
 * k번째에 있는 수를 구하려 합니다.
 *
 * 예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면
 * ?1. array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
 * ?2. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
 * ?3. 2에서 나온 배열의 3번째 숫자는 5입니다.
 */
//  !입출력 예
//  array	                           commands	                return
//  [1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]
//  !입출력 예 설명
//  [1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
//  [1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
//  [1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.

//! [1, 5, 2, 6, 3, 7, 4]

//* [2,5,3]
//? [1]~[4]

//* [4,4,1]
//? [3]~[3]

//* [1,7,3]
//? [0]~[6]

// !숫자를 sort할때는 유니코드의 영항을 받기 때문에 sort((a, b) => a - b)이와 같은 조건식으로 처리해야함.
// !원본배열에 부수효과가 있으면 안됨.
function solution(array, commands) {
  var answer = [];
  for (let i = 0; i < commands.length; i++) {
    //? 배열을 순회하며 commands의 [0],[1]번째 값으로 배열을 자른다.
    // slice는 start부터 end까지 자르지만 end값은 포함하지 않는다.
    // slice(0,2) -> [0]부터 [1]까지 복사한다.
    // slice(1,5) -> [1]부터 [4]까지 복사한다.
    const newArray = array.slice(commands[i][0] - 1, commands[i][1]);
    answer.push(newArray.sort((a, b) => a - b)[commands[i][2] - 1]);
  }
  return answer;
}
